---
apiVersion: v1
kind: Namespace
metadata:
  name: chatbot-rag-alliance
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: chatbot-rag-alliance
type: Opaque
stringData:
  SECRET_KEY: "dummy-secret-key-123456"
  GOOGLE_AI_API_KEY: "dummy-google-api-key"
  ANTHROPIC_API_KEY: "dummy-anthropic-api-key"
  GROQ_API_KEY: "dummy-groq-api-key"
  OPENAI_API_KEY: "dummy-openai-api-key"
  RAGIE_API_KEY: "dummy-ragie-api-key"
  RAGFLOW_API_KEY: "dummy-ragflow-api-key"
---
# Deployment for the Slurm Chat application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: chatbot-rag-alliance-deployment
  namespace: chatbot-rag-alliance
  labels:
    app: chatbot-rag-alliance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: chatbot-rag-alliance
  template:
    metadata:
      labels:
        app: chatbot-rag-alliance
    spec:
      containers:
      - name: chatbot-rag-alliance
        image: rkhoja/alliance-chat:latest
        imagePullPolicy: Always
        env:
          - name: AI_PROVIDER
            value: "OLLAMA" # Replace with your value [OPENAI,G]
          - name: AI_MODEL_A
            value: "deepseek-r1:671b" # Replace with your value
          - name: AI_MODEL_B
            value: "command-r-plus:latest" # Replace with your value
          - name: RAGFLOW_API_URL
            value: "https://1.2.3.4"
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: SECRET_KEY
          - name: GOOGLE_AI_API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: GOOGLE_AI_API_KEY
          - name: ANTHROPIC_API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: ANTHROPIC_API_KEY
          - name: GROQ_API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: GROQ_API_KEY
          - name: OPENAI_API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: OPENAI_API_KEY
          - name: RAGIE_API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: RAGIE_API_KEY
          - name: RAGFLOW_API_KEY
            valueFrom:
              secretKeyRef:
                name: app-secrets
                key: RAGFLOW_API_KEY
        ports:
        - containerPort: 8000
---
# Service to expose the application internally
apiVersion: v1
kind: Service
metadata:
  name: chatbot-rag-alliance-service
  namespace: chatbot-rag-alliance
spec:
  selector:
    app: chatbot-rag-alliance
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  type: ClusterIP
---
# Certificate for SSL via cert-manager
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: chat-cluster-paice-ua-com
  namespace: chatbot-rag-alliance
spec:
  secretName: chat-cluster-paice-ua-com-tls
  issuerRef:
    name: letsencrypt-dns # Assumes this ClusterIssuer exists
    kind: ClusterIssuer
  commonName: chat.cluster.paice-ua.com
  dnsNames:
    - chat.cluster.paice-ua.com
---
# Ingress for public access with SSL
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chatbot-rag-alliance-ingress
  namespace: chatbot-rag-alliance
  annotations:
    traefik.ingress.kubernetes.io/router.tls: "true" # Explicitly enable TLS
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - chat.cluster.paice-ua.com
    secretName: chat-cluster-paice-ua-com-tls # Matches Certificate secretName
  rules:
  - host: chat.cluster.paice-ua.com # Only responds to this hostname
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: chatbot-rag-alliance-service
            port:
              number: 8000
